//
//  RegisterSceneViewController.swift
//  SOM AI
//
//  Created by Bagas Ilham on 17/11/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

protocol RegisterSceneDelegate: NSObject {
    func didDismissViewController()
}

final class RegisterSceneViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: RegisterScenePresenterInterface!
    weak var delegate: RegisterSceneDelegate?

    // MARK: - Private properties -

    private let disposeBag = DisposeBag()
    
    // MARK: - UI Properties -
    
    private lazy var mainContainerView: UIView = {
        let view = UIView()
        view.addSubviews(mainScrollView)
        mainScrollView.snp.makeConstraints { make in
            make.leading.trailing.equalToSuperview()
            make.top.bottom.equalTo(view.layoutMarginsGuide)
        }
        
        return view
    }()
    
    private lazy var dismissButton: UIBarButtonItem = {
        let button = UIBarButtonItem()
        button.image = UIImage(systemName: "xmark")
        button.tintColor = R.color.contentOrange()
        
        return button
    }()
    
    private lazy var mainScrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.alwaysBounceVertical = true
        scrollView.alwaysBounceHorizontal = false
        scrollView.addSubview(mainStackView)
        mainStackView.snp.makeConstraints { make in
            make.width.equalToSuperview().inset(16)
            make.centerY.centerX.equalToSuperview()
        }
        
        return scrollView
    }()
    
    private lazy var mainStackView: UIStackView = {
        let stackView = UIStackView(arrangedSubviews: [titleView, middleStackView, bottomStackView])
        stackView.alignment = .fill
        stackView.alpha = 0
        stackView.axis = .vertical
        stackView.distribution = .equalSpacing
        stackView.spacing = 36
        
        return stackView
    }()
    
    private lazy var titleView: UIView = {
        let view = UIView()
        view.addSubviews(titleLabel, subtitleLabel, decorationImageView)
        titleLabel.snp.makeConstraints { make in
            make.top.leading.equalToSuperview()
            make.trailing.equalTo(decorationImageView.snp.leading).offset(-16)
        }
        
        decorationImageView.snp.makeConstraints({ $0.top.trailing.equalToSuperview() })
        
        subtitleLabel.snp.makeConstraints { make in
            make.top.equalTo(titleLabel.snp.bottom).offset(8)
            make.leading.trailing.equalTo(titleLabel)
            make.bottom.equalToSuperview()
        }
        
        return view
    }()
    
    private lazy var titleLabel: UILabel = {
        let label = UILabel()
        label.font = R.font.interBlack(size: 32)
        label.numberOfLines = 1
        label.text = "Buat Akun"
        label.textColor = R.color.contentDark()
        
        return label
    }()
    
    private lazy var subtitleLabel: UILabel = {
        let label = UILabel()
        label.font = R.font.interMedium(size: 16)
        label.numberOfLines = 1
        label.text = "Yuk mulai penelitianmu!"
        label.textColor = R.color.contentDisabledPrimary()
        
        return label
    }()
    
    private lazy var decorationImageView: UIImageView = {
        let imageView = UIImageView(image: R.image.sparkleIllustration())
        imageView.clipsToBounds = true
        imageView.contentMode = .scaleAspectFit
        imageView.snp.makeConstraints({ $0.height.width.equalTo(69) })
        
        return imageView
    }()
    
    private lazy var middleStackView: UIStackView = {
        let stackView = UIStackView(arrangedSubviews: [
            createTextFieldTitle("Nama Lengkap", for: nameTextField),
            createTextFieldTitle("Asal Universitas", for: universityTextField),
            createTextFieldTitle("Email", for: emailTextField),
            createTextFieldTitle("Kata Sandi", for: passwordTextField, isUsingBottomLabel: true, bottomLabelText: "Pastikan ada huruf besar dan kecil, angka, dan karakter khusus ya!")
        ])
        stackView.alignment = .fill
        stackView.axis = .vertical
        stackView.distribution = .equalSpacing
        stackView.spacing = 16
        
        return stackView
    }()
    
    private lazy var nameTextField: DefaultTextField = {
        let textField = DefaultTextField()
        textField.autocapitalizationType = .words
        textField.autocorrectionType = .no
        textField.placeholder = "Masukkan nama lengkap"
        
        return textField
    }()
    
    private lazy var universityTextField: DefaultTextField = {
        let textField = DefaultTextField()
        textField.placeholder = "Masukkan asal universitas"
        
        return textField
    }()
    
    private lazy var emailTextField: DefaultTextField = {
        let textField = DefaultTextField()
        textField.keyboardType = .emailAddress
        textField.placeholder = "you@example.com"
        
        return textField
    }()
    
    private lazy var passwordTextField: PasswordTextField = {
        let textField = PasswordTextField()
        textField.placeholder = "8-12 karakter"
        
        return textField
    }()
    
    private lazy var bottomStackView: UIStackView = {
        let stackView = UIStackView(arrangedSubviews: [loginButton, loginButtonDividerView, loginWithGoogleButton, registerView])
        stackView.alignment = .fill
        stackView.axis = .vertical
        stackView.distribution = .equalSpacing
        stackView.spacing = 16
        
        return stackView
    }()
    
    private lazy var loginButton: FloatingButtonView = {
        let view = FloatingButtonView()
        view.setTitle("Daftar")
        
        return view
    }()
    
    private lazy var loginButtonDividerView: UIView = {
        let dividerView = UIView()
        dividerView.backgroundColor = R.color.contentDisabledSecondary()
        
        let dividerLabel = UILabel()
        dividerLabel.font = R.font.interMedium(size: 14)
        dividerLabel.text = "Atau"
        dividerLabel.textAlignment = .center
        dividerLabel.textColor = R.color.contentDisabledSecondary()
        
        let labelWrapperView = UIView()
        labelWrapperView.backgroundColor = R.color.backgroundWhite()
        labelWrapperView.clipsToBounds = true
        labelWrapperView.addSubview(dividerLabel)
        dividerLabel.snp.makeConstraints { make in
            make.top.bottom.equalToSuperview()
            make.leading.equalToSuperview().offset(16)
            make.trailing.equalToSuperview().offset(-16)
        }
        
        let view = UIView()
        view.addSubviews(dividerView, labelWrapperView)
        dividerView.snp.makeConstraints { make in
            make.height.equalTo(1)
            make.leading.trailing.centerY.equalToSuperview()
        }
        labelWrapperView.snp.makeConstraints { make in
            make.top.bottom.centerX.equalToSuperview()
        }
        
        return view
    }()
    
    private lazy var loginWithGoogleButton: FloatingButtonView = {
        let view = FloatingButtonView(buttonType: .secondary)
        view.setImage(R.image.googleIcon()!)
        view.setTitle("Daftar dengan Google")
        
        return view
    }()
    
    private lazy var registerView: UIView = {
        var attributedString = NSMutableAttributedString(
            string: "Sudah punya akun? ",
            attributes: [
                .font: R.font.interMedium(size: 14)!,
                .foregroundColor: R.color.contentDark()!
            ]
        )
        
        attributedString.append(NSAttributedString(
            string: "Masuk akun",
            attributes: [
                .font: R.font.interBold(size: 14)!,
                .foregroundColor: R.color.contentOrange()!,
                .underlineStyle: NSUnderlineStyle.single.rawValue
            ]
        ))
        
        let label = UILabel()
        label.attributedText = attributedString
        label.textAlignment = .center
        
        let view = UIView()
        view.addSubview(label)
        label.snp.makeConstraints { make in
            make.top.leading.equalToSuperview().offset(16)
            make.bottom.trailing.equalToSuperview().offset(-16)
        }
        
        return view
    }()


    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        makeUI()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        mainStackView.fadeInWithScale()
    }

}

// MARK: - Extensions -

extension RegisterSceneViewController: RegisterSceneViewInterface {
}

// MARK: - Main Private Extension -

private extension RegisterSceneViewController {
    func setupView() {
        let output = RegisterScene.ViewOutput()

        let input = presenter.configure(with: output)
        
        dismissButton.rx.tap.asDriver()
            .drive(onNext: { [weak self] _ in
                guard let self = self else { return }
                self.navigationItem.leftBarButtonItem = nil
                self.delegate?.didDismissViewController()
                self.mainStackView.fadeOutWithScale { _ in
                    self.presenter.didTapDismissButton()
                }
            })
            .disposed(by: disposeBag)
        
        nameTextField.rx.controlEvent(.editingDidBegin)
            .subscribe { [weak self] _ in
                guard let self = self else { return }
                self.mainScrollView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 150, right: 0)
//                self.mainStackView.snp.makeConstraints { make in
//                    make.width.equalToSuperview().inset(16)
//                    make.top.centerX.equalToSuperview()
//                    make.bottom.equalToSuperview().offset(self.view.frame.height / 2)
//                }
            }
            .disposed(by: disposeBag)
        
        nameTextField.rx.controlEvent(.editingDidEnd)
            .subscribe { [weak self] _ in
                guard let self = self else { return }
                self.mainScrollView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
            }
            .disposed(by: disposeBag)
    }
    
    func makeUI() {
        navigationItem.leftBarButtonItem = dismissButton
        navigationController?.isNavigationBarHidden = false
        navigationController?.navigationBar.isOpaque = false
        
        view.addSubview(mainContainerView)
        mainContainerView.snp.makeConstraints({ $0.edges.equalToSuperview() })
        
        view.isUserInteractionEnabled = true
        view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(didTapView)))
    }
}

// MARK: - Additional Private Extension -

private extension RegisterSceneViewController {
    func createTextFieldTitle(
        _ title: String,
        for textField: UITextField,
        isUsingBottomLabel: Bool = false,
        bottomLabelText: String = ""
    ) -> UIView {
        let label = UILabel()
        label.font = R.font.interBold(size: 14)
        label.numberOfLines = 0
        label.text = title
        label.textColor = R.color.contentDark()
        
        let view = UIView()
        view.addSubviews(label, textField)
        label.snp.makeConstraints({ $0.top.leading.trailing.equalToSuperview() })
        textField.snp.makeConstraints { make in
            make.top.equalTo(label.snp.bottom).offset(4)
            make.leading.trailing.equalToSuperview()
            if !isUsingBottomLabel { make.bottom.equalToSuperview() }
        }
        if isUsingBottomLabel {
            let bottomLabel = UILabel()
            bottomLabel.font = R.font.interMedium(size: 12)
            bottomLabel.numberOfLines = 0
            bottomLabel.text = bottomLabelText
            bottomLabel.textColor = R.color.contentDisabledPrimary()
            
            view.addSubview(bottomLabel)
            bottomLabel.snp.makeConstraints { make in
                make.top.equalTo(textField.snp.bottom).offset(4)
                make.leading.trailing.bottom.equalToSuperview()
            }
        }
        
        return view
    }
    
    @objc
    func didTapView() {
        view.endEditing(true)
    }
}
