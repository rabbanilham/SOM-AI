//
//  LoginSceneViewController.swift
//  SOM AI
//
//  Created by Bagas Ilham on 13/11/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxCocoa
import RxSwift

final class LoginSceneViewController: UIViewController {
    // MARK: - Public properties -

    var presenter: LoginScenePresenterInterface!

    // MARK: - Private properties -

    private let disposeBag = DisposeBag()
    
    private var isInitialMovementPosition = true
    private var isNavigatedFromFront = false
    
    // MARK: - UI Properties -
    
    private lazy var mainContainerView: UIView = {
        let view = UIView()
        view.addSubviews(orangeBlurredCircleView, purpleBlurredCircleView, blurView, mainStackView)
        orangeBlurredCircleView.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalTo(view.layoutMarginsGuide.snp.top)
        }
        purpleBlurredCircleView.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalTo(view.layoutMarginsGuide.snp.bottom)
        }
        blurView.snp.makeConstraints({ $0.edges.equalToSuperview() })
        mainStackView.snp.makeConstraints { make in
            make.leading.equalToSuperview().offset(16)
            make.trailing.equalToSuperview().offset(-16)
            make.centerY.equalToSuperview()
        }
        
        return view
    }()
    
    private lazy var orangeBlurredCircleView: UIView = {
        let view = UIView()
        view.alpha = 0.25
        view.backgroundColor = R.color.contentOrange()
        view.clipsToBounds = true
        view.layer.cornerRadius = 87.5
        view.snp.makeConstraints({ $0.height.width.equalTo(170) })
        
        return view
    }()
    
    private lazy var purpleBlurredCircleView: UIView = {
        let view = UIView()
        view.alpha = 0.25
        view.backgroundColor = R.color.contentPurple()
        view.clipsToBounds = true
        view.layer.cornerRadius = 87.5
        view.snp.makeConstraints({ $0.height.width.equalTo(170) })
        
        return view
    }()
    
    private lazy var blurView: UIVisualEffectView = {
        let view = UIVisualEffectView()
        view.effect = UIBlurEffect(style: .light)
        
        return view
    }()
    
    private lazy var backButton: UIBarButtonItem = {
        let button = UIBarButtonItem()
        button.image = UIImage(systemName: "chevron.left")
        button.tintColor = R.color.contentOrange()
        
        return button
    }()
    
    lazy var mainStackView: UIStackView = {
        let stackView = UIStackView(arrangedSubviews: [titleView, middleStackView, bottomStackView])
        stackView.alignment = .fill
        stackView.axis = .vertical
        stackView.distribution = .equalSpacing
        stackView.spacing = 36
        
        return stackView
    }()
    
    private lazy var titleView: UIView = {
        let view = UIView()
        view.addSubviews(titleLabel, subtitleLabel, decorationImageView)
        titleLabel.snp.makeConstraints { make in
            make.top.leading.equalToSuperview()
            make.trailing.equalTo(decorationImageView.snp.leading).offset(-16)
        }
        
        decorationImageView.snp.makeConstraints({ $0.top.trailing.equalToSuperview() })
        
        subtitleLabel.snp.makeConstraints { make in
            make.top.equalTo(titleLabel.snp.bottom).offset(8)
            make.leading.trailing.equalTo(titleLabel)
            make.bottom.equalToSuperview()
        }
        
        return view
    }()
    
    private lazy var titleLabel: UILabel = {
        let label = UILabel()
        label.font = R.font.interBlack(size: 32)
        label.numberOfLines = 1
        label.text = "Masuk Akun"
        label.textColor = R.color.contentDark()
        
        return label
    }()
    
    private lazy var subtitleLabel: UILabel = {
        let label = UILabel()
        label.font = R.font.interMedium(size: 16)
        label.numberOfLines = 1
        label.text = "Mari selesaikan penelitianmu!"
        label.textColor = R.color.contentDisabledPrimary()
        
        return label
    }()
    
    private lazy var decorationImageView: UIImageView = {
        let imageView = UIImageView(image: R.image.sparkleIllustration())
        imageView.clipsToBounds = true
        imageView.contentMode = .scaleAspectFit
        imageView.snp.makeConstraints({ $0.height.width.equalTo(69) })
        
        return imageView
    }()
    
    private lazy var middleStackView: UIStackView = {
        let stackView = UIStackView(arrangedSubviews: [
            createTextFieldTitle("Email", for: emailTextField),
            createTextFieldTitle("Kata Sandi", for: passwordTextField),
            forgotPasswordLabel
        ])
        stackView.alignment = .fill
        stackView.axis = .vertical
        stackView.distribution = .equalSpacing
        stackView.spacing = 16
        
        return stackView
    }()
    
    private lazy var emailTextField: DefaultTextField = {
        let textField = DefaultTextField()
        textField.keyboardType = .emailAddress
        textField.placeholder = "you@example.com"
        
        return textField
    }()
    
    private lazy var passwordTextField: PasswordTextField = {
        let textField = PasswordTextField()
        textField.placeholder = "Masukkan kata sandi"
        
        return textField
    }()
    
    private lazy var forgotPasswordLabel: UILabel = {
        let attributedString = NSAttributedString(
            string: "Lupa kata sandi?",
            attributes: [
                .font: R.font.interBold(size: 14)!,
                .foregroundColor: R.color.contentOrange()!,
                .underlineStyle: NSUnderlineStyle.single.rawValue
            ]
        )
        
        let label = UILabel()
        label.attributedText = attributedString
        label.textAlignment = .right
        
        return label
    }()
    
    private lazy var bottomStackView: UIStackView = {
        let stackView = UIStackView(arrangedSubviews: [loginButton, loginButtonDividerView, loginWithGoogleButton, registerView])
        stackView.alignment = .fill
        stackView.axis = .vertical
        stackView.distribution = .equalSpacing
        stackView.spacing = 16
        
        return stackView
    }()
    
    private lazy var loginButton: FloatingButtonView = {
        let view = FloatingButtonView()
        view.setTitle("Masuk")
        
        return view
    }()
    
    private lazy var loginButtonDividerView: UIView = {
        let dividerView = UIView()
        dividerView.backgroundColor = R.color.contentDisabledSecondary()
        
        let dividerLabel = UILabel()
        dividerLabel.font = R.font.interMedium(size: 14)
        dividerLabel.text = "Atau"
        dividerLabel.textAlignment = .center
        dividerLabel.textColor = R.color.contentDisabledSecondary()
        
        let labelWrapperView = UIView()
        labelWrapperView.backgroundColor = R.color.backgroundWhite()
        labelWrapperView.clipsToBounds = true
        labelWrapperView.addSubview(dividerLabel)
        dividerLabel.snp.makeConstraints { make in
            make.top.bottom.equalToSuperview()
            make.leading.equalToSuperview().offset(16)
            make.trailing.equalToSuperview().offset(-16)
        }
        
        let view = UIView()
        view.addSubviews(dividerView, labelWrapperView)
        dividerView.snp.makeConstraints { make in
            make.height.equalTo(1)
            make.leading.trailing.centerY.equalToSuperview()
        }
        labelWrapperView.snp.makeConstraints { make in
            make.top.bottom.centerX.equalToSuperview()
        }
        
        return view
    }()
    
    private lazy var loginWithGoogleButton: FloatingButtonView = {
        let view = FloatingButtonView(buttonType: .secondary)
        view.setImage(R.image.googleIcon()!)
        view.setTitle("Masuk dengan Google")
        
        return view
    }()
    
    private lazy var registerView: UIView = {
        var attributedString = NSMutableAttributedString(
            string: "Belum punya akun? ",
            attributes: [
                .font: R.font.interMedium(size: 14)!,
                .foregroundColor: R.color.contentDark()!
            ]
        )
        
        attributedString.append(NSAttributedString(
            string: "Buat akun",
            attributes: [
                .font: R.font.interBold(size: 14)!,
                .foregroundColor: R.color.contentOrange()!,
                .underlineStyle: NSUnderlineStyle.single.rawValue
            ]
        ))
        
        let label = UILabel()
        label.attributedText = attributedString
        label.isUserInteractionEnabled = true
        label.textAlignment = .center
        label.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(didTapRegisterLabel)))
        
        let view = UIView()
        view.addSubview(label)
        label.snp.makeConstraints { make in
            make.top.leading.equalToSuperview().offset(16)
            make.bottom.trailing.equalToSuperview().offset(-16)
        }
        
        return view
    }()

    // MARK: - Lifecycle -
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.isNavigationBarHidden = false
        navigationController?.navigationBar.isOpaque = false
        navigationItem.leftBarButtonItem = backButton
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        makeUI()
    }
}

// MARK: - Extensions -

extension LoginSceneViewController: LoginSceneViewInterface {
    func animateBlurMovement() {
        if isInitialMovementPosition {
            UIView.animate(withDuration: 1, delay: 0, options: .curveEaseOut) {
                self.orangeBlurredCircleView.snp.remakeConstraints { make in
                    make.centerX.equalTo(self.mainContainerView.snp.trailing)
                    make.centerY.equalTo(self.mainContainerView.layoutMarginsGuide.snp.top)
                    make.height.width.equalTo(170)
                }
                self.purpleBlurredCircleView.snp.remakeConstraints { make in
                    make.centerX.equalTo(self.mainContainerView.snp.leading)
                    make.centerY.equalTo(self.mainContainerView.layoutMarginsGuide.snp.bottom)
                    make.height.width.equalTo(170)
                }
                self.view.layoutIfNeeded()
            }
        } else {
            UIView.animate(withDuration: 1, delay: 0, options: .curveEaseOut) {
                self.orangeBlurredCircleView.snp.remakeConstraints { make in
                    make.centerX.equalTo(self.mainContainerView.snp.leading)
                    make.centerY.equalTo(self.mainContainerView.layoutMarginsGuide.snp.top)
                    make.height.width.equalTo(170)
                }
                self.purpleBlurredCircleView.snp.remakeConstraints { make in
                    make.centerX.equalTo(self.mainContainerView.snp.trailing)
                    make.centerY.equalTo(self.mainContainerView.layoutMarginsGuide.snp.bottom)
                    make.height.width.equalTo(170)
                }
                self.view.layoutIfNeeded()
            }
        }
        isInitialMovementPosition.toggle()
    }
}

// MARK: - RegisterSceneDelegate -

extension LoginSceneViewController: RegisterSceneDelegate {
    func didDismissViewController() {
        navigationItem.leftBarButtonItem = backButton
        mainStackView.fadeInWithScale()
        animateBlurMovement()
    }
}

// MARK: - Main Private Extension -

private extension LoginSceneViewController {
    func setupView() {
        let output = LoginScene.ViewOutput()

        let input = presenter.configure(with: output)
        
        backButton.rx.tap.asDriver()
            .drive(onNext: presenter.didTapBackBarButton)
            .disposed(by: disposeBag)
        
        loginButton.mainButton.rx.tap.asDriver()
            .drive(onNext: presenter.didTapLoginButton)
            .disposed(by: disposeBag)
        
        loginWithGoogleButton.mainButton.rx.tap.asDriver()
            .drive(onNext: presenter.didTapLoginWithGoogleButton)
            .disposed(by: disposeBag)
    }
    
    func makeUI() {
        navigationItem.leftBarButtonItem = backButton
        navigationItem.hidesBackButton = true
        
        view.backgroundColor = R.color.backgroundWhite()
        view.clipsToBounds = true
        
        view.addSubview(mainContainerView)
        mainContainerView.snp.makeConstraints({ $0.edges.equalToSuperview() })
        
        view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(didTapView)))
        
        animateInitialBlurMovement()
    }
}

// MARK: - Additional Private Extension -

private extension LoginSceneViewController {
    func animateInitialBlurMovement() {
        DispatchQueue.main.async {
            UIView.animate(withDuration: 1, delay: 0, options: .curveEaseOut) {
                self.orangeBlurredCircleView.snp.remakeConstraints { make in
                    make.centerX.equalTo(self.mainContainerView.snp.leading)
                    make.centerY.equalTo(self.mainContainerView.layoutMarginsGuide.snp.top)
                    make.height.width.equalTo(170)
                }
                self.purpleBlurredCircleView.snp.remakeConstraints { make in
                    make.centerX.equalTo(self.mainContainerView.snp.trailing)
                    make.centerY.equalTo(self.mainContainerView.layoutMarginsGuide.snp.bottom)
                    make.height.width.equalTo(170)
                }
                self.view.layoutIfNeeded()
            }
        }
    }
    
    func createTextFieldTitle(
        _ title: String,
        for textField: UITextField
    ) -> UIView {
        let label = UILabel()
        label.font = R.font.interBold(size: 14)
        label.text = title
        label.textColor = R.color.contentDark()
        
        let view = UIView()
        view.addSubviews(label, textField)
        label.snp.makeConstraints({ $0.top.leading.trailing.equalToSuperview() })
        textField.snp.makeConstraints { make in
            make.top.equalTo(label.snp.bottom).offset(4)
            make.leading.bottom.trailing.equalToSuperview()
        }
        
        return view
    }
    
    @objc
    func didTapView() {
        view.endEditing(true)
    }
    
    @objc
    func didTapRegisterLabel() {
        self.isNavigatedFromFront = true
        animateBlurMovement()
        mainStackView.fadeOutWithScale()
        navigationItem.leftBarButtonItem = nil
        presenter.didTapRegisterButton()
    }
}
