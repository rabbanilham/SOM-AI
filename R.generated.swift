//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 15 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `BackgroundDark`.
    var backgroundDark: RswiftResources.ColorResource { .init(name: "BackgroundDark", path: [], bundle: bundle) }

    /// Color `BackgroundDisabled`.
    var backgroundDisabled: RswiftResources.ColorResource { .init(name: "BackgroundDisabled", path: [], bundle: bundle) }

    /// Color `BackgroundError`.
    var backgroundError: RswiftResources.ColorResource { .init(name: "BackgroundError", path: [], bundle: bundle) }

    /// Color `BackgroundLight`.
    var backgroundLight: RswiftResources.ColorResource { .init(name: "BackgroundLight", path: [], bundle: bundle) }

    /// Color `BackgroundOrange`.
    var backgroundOrange: RswiftResources.ColorResource { .init(name: "BackgroundOrange", path: [], bundle: bundle) }

    /// Color `BackgroundPink`.
    var backgroundPink: RswiftResources.ColorResource { .init(name: "BackgroundPink", path: [], bundle: bundle) }

    /// Color `BackgroundWhite`.
    var backgroundWhite: RswiftResources.ColorResource { .init(name: "BackgroundWhite", path: [], bundle: bundle) }

    /// Color `ContentDark`.
    var contentDark: RswiftResources.ColorResource { .init(name: "ContentDark", path: [], bundle: bundle) }

    /// Color `ContentDisabledPrimary`.
    var contentDisabledPrimary: RswiftResources.ColorResource { .init(name: "ContentDisabledPrimary", path: [], bundle: bundle) }

    /// Color `ContentDisabledSecondary`.
    var contentDisabledSecondary: RswiftResources.ColorResource { .init(name: "ContentDisabledSecondary", path: [], bundle: bundle) }

    /// Color `ContentError`.
    var contentError: RswiftResources.ColorResource { .init(name: "ContentError", path: [], bundle: bundle) }

    /// Color `ContentOrange`.
    var contentOrange: RswiftResources.ColorResource { .init(name: "ContentOrange", path: [], bundle: bundle) }

    /// Color `ContentPurple`.
    var contentPurple: RswiftResources.ColorResource { .init(name: "ContentPurple", path: [], bundle: bundle) }

    /// Color `ContentWhite`.
    var contentWhite: RswiftResources.ColorResource { .init(name: "ContentWhite", path: [], bundle: bundle) }

    /// Color `HighlightPink`.
    var highlightPink: RswiftResources.ColorResource { .init(name: "HighlightPink", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 15 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Avatar`.
    var avatar: RswiftResources.ImageResource { .init(name: "Avatar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Brainstorm`.
    var brainstorm: RswiftResources.ImageResource { .init(name: "Brainstorm", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Chat`.
    var chat: RswiftResources.ImageResource { .init(name: "Chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ChevronDown`.
    var chevronDown: RswiftResources.ImageResource { .init(name: "ChevronDown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ChevronUp`.
    var chevronUp: RswiftResources.ImageResource { .init(name: "ChevronUp", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EyeOff`.
    var eyeOff: RswiftResources.ImageResource { .init(name: "EyeOff", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `GoogleIcon`.
    var googleIcon: RswiftResources.ImageResource { .init(name: "GoogleIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LandingIllustration`.
    var landingIllustration: RswiftResources.ImageResource { .init(name: "LandingIllustration", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LandingInAction`.
    var landingInAction: RswiftResources.ImageResource { .init(name: "LandingInAction", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LogoIcon`.
    var logoIcon: RswiftResources.ImageResource { .init(name: "LogoIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LogoWithText`.
    var logoWithText: RswiftResources.ImageResource { .init(name: "LogoWithText", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Puzzle`.
    var puzzle: RswiftResources.ImageResource { .init(name: "Puzzle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Quote`.
    var quote: RswiftResources.ImageResource { .init(name: "Quote", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SearchIllustration`.
    var searchIllustration: RswiftResources.ImageResource { .init(name: "SearchIllustration", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SparkleIllustration`.
    var sparkleIllustration: RswiftResources.ImageResource { .init(name: "SparkleIllustration", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Inter-Black`.
    var interBlack: RswiftResources.FontResource { .init(name: "Inter-Black", bundle: bundle, filename: "Inter-Black.ttf") }

    /// Font `Inter-Bold`.
    var interBold: RswiftResources.FontResource { .init(name: "Inter-Bold", bundle: bundle, filename: "Inter-Bold.ttf") }

    /// Font `Inter-Medium`.
    var interMedium: RswiftResources.FontResource { .init(name: "Inter-Medium", bundle: bundle, filename: "Inter-Medium.ttf") }

    /// Font `Inter-Regular`.
    var interRegular: RswiftResources.FontResource { .init(name: "Inter-Regular", bundle: bundle, filename: "Inter-Regular.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [interBlack, interBold, interMedium, interRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 4 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Inter-Black.ttf`.
    var interBlackTtf: RswiftResources.FileResource { .init(name: "Inter-Black", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Bold.ttf`.
    var interBoldTtf: RswiftResources.FileResource { .init(name: "Inter-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Medium.ttf`.
    var interMediumTtf: RswiftResources.FileResource { .init(name: "Inter-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Regular.ttf`.
    var interRegularTtf: RswiftResources.FileResource { .init(name: "Inter-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}